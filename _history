{"entries":[{"timestamp":1753695308467,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":185,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":194,"diffs":[[1,""]]},{"start1":1,"length1":2744,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":237,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1753695881628,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":156,"diffs":[[1,""]]},{"start1":1815,"length1":304,"diffs":[[1,"        // (M1 and M3 are constructed in reverse)\n        Nezha.motorSpeed(Motors[MFL], frontleft)   // front left\n        Nezha.motorSpeed(Motor.M3, -frontright) // front right\n        Nezha.motorSpeed(Motor.M2, backleft)    // back left\n        Nezha.motorSpeed(Motor.M1, -backright)  // back right\n"]]},{"start1":2123,"length1":68,"diffs":[[1,"    export function setMotors(frontleft: number, frontright: number, backleft: number, backright: number) {\n"]]},{"start1":2294,"length1":134,"diffs":[[1,"        // (M1 and M3 are constructed in reverse)\n        Nezha.motorSpeed(Motor.M4, frontleft)   // front left\n        Nezha.motorSpeed(Motor.M3, -frontright) // front right\n        Nezha.motorSpeed(Motor.M2, backleft)    // back left\n        Nezha.motorSpeed(Motor.M1, -backright)  // back right\n"]]}]}]},{"timestamp":1753696474093,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":476,"length1":164,"diffs":[[1,""]]},{"start1":786,"length1":61,"diffs":[[1,""]]},{"start1":787,"length1":117,"diffs":[[1,"    function setFrontLeftMotor(mot: Motor, rev: boolean) {\n        Motors[0] = mot\n        Revert[0] = rev\n"]]},{"start1":901,"length1":118,"diffs":[[1,"    function setFrontRightMotor(mot: Motor, rev: boolean) {\n        Motors[1] = mot\n        Revert[1] = rev\n"]]},{"start1":1016,"length1":116,"diffs":[[1,"    function setBackLeftMotor(mot: Motor, rev: boolean) {\n        Motors[2] = mot\n        Revert[2] = rev\n"]]},{"start1":1129,"length1":117,"diffs":[[1,"    function setBackRightMotor(mot: Motor, rev: boolean) {\n        Motors[3] = mot\n        Revert[3] = rev\n"]]},{"start1":1243,"length1":90,"diffs":[[1,""]]}]}]},{"timestamp":1753697063462,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":156,"length1":120,"diffs":[[1,"enum Connector {\n    //% block=\"J1\" \n    J1 = DigitalPin.P8,\n    //% block=\"J2\"\n    J2 = DigitalPin.P12,\n    //% block=\"J3\"\n    J3 = DigitalPin.P14,\n    //% block=\"J4\"\n    J4 = DigitalPin.P16\n"]]},{"start1":550,"length1":16,"diffs":[[1,"    ST360 = 360,\n    //% block=\"continuous\"\n    //% block.loc.nl=\"continu\"\n    STC = 0\n"]]},{"start1":640,"length1":383,"diffs":[[1,"enum Motor {\n    //% block=\"M1\"\n    M1,\n    //% block=\"M2\"\n    M2,\n    //% block=\"M3\"\n    M3,\n    //% block=\"M4\"\n    M4\n"]]},{"start1":2977,"length1":58,"diffs":[[1,"        angle = Math.map(angle, 0, 360, 0, 180)\n"]]}]}]},{"timestamp":1753697621394,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":458,"length1":36,"diffs":[[1,""]]},{"start1":497,"length1":197,"diffs":[[1,"enum Connector {\n    //% block=\"J1A\" \n    J1A = DigitalPin.P8,\n    //% block=\"J1B\" \n    J1B = DigitalPin.P1,\n    //% block=\"J2A\"\n    J2A = DigitalPin.P12,\n    //% block=\"J2B\"\n    J2B = DigitalPin.P2,\n    //% block=\"J3A\"\n    J3A = DigitalPin.P14,\n    //% block=\"J3B\"\n    J3B = DigitalPin.P13,\n    //% block=\"J4A\"\n    J4A = DigitalPin.P16,\n    //% block=\"J4B\"\n    J4B = DigitalPin.P15\n"]]},{"start1":883,"length1":203,"diffs":[[1,""]]},{"start1":902,"length1":21,"diffs":[[1,""]]},{"start1":1070,"length1":0,"diffs":[[1,"    let Servos = [180, 180, 180, 180] // all ServoType.ST180\n"]]},{"start1":1628,"length1":0,"diffs":[[1,"    function setServoType(servo: Servo, st:ServoType) {\n        Servos[servo] = st\n    }\n\n"]]},{"start1":3029,"length1":174,"diffs":[[1,""]]},{"start1":3377,"length1":567,"diffs":[[1,""]]}]}]},{"timestamp":1753698220821,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":533,"length1":13,"diffs":[[1,"enum AnalogRJ {\n"]]},{"start1":569,"length1":9,"diffs":[[1,"    RJ1 = DigitalPin.P1,\n"]]},{"start1":614,"length1":9,"diffs":[[1,"    RJ2 = DigitalPin.P2,\n"]]},{"start1":659,"length1":9,"diffs":[[1,"    RJ3 = DigitalPin.P13,\n"]]},{"start1":705,"length1":8,"diffs":[[1,"    RJ4 = DigitalPin.P15\n"]]},{"start1":733,"length1":0,"diffs":[[1,"enum DigitalRJ {\n    //% block=\"RJ1\"\n    RJ1 = DigitalPin.P8,\n    //% block=\"RJ2\"\n    RJ2 = DigitalPin.P12,\n    //% block=\"RJ3\"\n    RJ3 = DigitalPin.P14,\n    //% block=\"RJ4\"\n    RJ4 = DigitalPin.P16,\n}\n\n"]]},{"start1":3496,"length1":261,"diffs":[[1,"    let DIGPIN = []\n    enum AnalogRJ {\n        //% block=\"RJ1\"\n        RJ1 = DigitalPin.P1,\n        //% block=\"RJ2\"\n        RJ2 = DigitalPin.P2,\n        //% block=\"RJ3\"\n        RJ3 = DigitalPin.P13,\n        //% block=\"RJ4\"\n        RJ4 = DigitalPin.P15\n"]]},{"start1":3756,"length1":115,"diffs":[[1,"    enum DigitalRJ {\n        //% block=\"RJ1\"\n        RJ1 = DigitalPin.P8,\n        //% block=\"RJ2\"\n        RJ2 = DigitalPin.P12,\n        //% block=\"RJ3\"\n        RJ3 = DigitalPin.P14,\n        //% block=\"RJ4\"\n        RJ4 = DigitalPin.P16,\n"]]},{"start1":3999,"length1":126,"diffs":[[1,"    export function readAnalog(pin:RJPin)\n"]]}]}]},{"timestamp":1753698560732,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3740,"length1":123,"diffs":[[1,""]]}]}]},{"timestamp":1753702251107,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3492,"length1":54,"diffs":[[1,"    export function writeAnalog(pin: RJPin, value:number) {\n"]]}]}]},{"timestamp":1753702258591,"editorVersion":"8.0.11","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":237,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":1369,"length1":18,"diffs":[[1,""]]},{"start1":1437,"length1":48,"diffs":[[1,""]]},{"start1":1536,"length1":39,"diffs":[[1,"            if (speed < -150) speed = -150\n"]]},{"start1":1918,"length1":18,"diffs":[[1,""]]},{"start1":2097,"length1":280,"diffs":[[1,"        Nezha.motorSpeed(Motors[MFL], Revert[MFL] ? -frontleft : frontleft)\n        Nezha.motorSpeed(Motors[MFR], Revert[MFR] ? -frontright : frontright)\n        Nezha.motorSpeed(Motors[MBL], Revert[MBL] ? -backleft : backleft)\n        Nezha.motorSpeed(Motors[MBR], Revert[MBR] ? -backright : backright)\n"]]},{"start1":2408,"length1":18,"diffs":[[1,""]]},{"start1":2539,"length1":122,"diffs":[[1,"        Nezha.motorSpeed(Motors[MFL], Revert[MFL] ? -left : left)\n        Nezha.motorSpeed(Motors[MFR], Revert[MFR] ? -right : right)\n"]]},{"start1":3385,"length1":53,"diffs":[[1,"    export function readAnalog(pin: RJPin): number {\n"]]},{"start1":3492,"length1":60,"diffs":[[1,"    export function write(pin: RJPin, value:number) {\n"]]},{"start1":3608,"length1":55,"diffs":[[1,"    export function readDigital(pin: RJPin): boolean {\n"]]},{"start1":3735,"length1":62,"diffs":[[1,"    export function writeAnalog(pin: RJPin, value: number) {\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":237,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests gaan hier; deze zal niet worden gecompileerd wanneer dit pakket wordt gebruikt als extensie.\n"}]}],"snapshots":[{"timestamp":1753695308466,"editorVersion":"8.0.11","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-nezhabrick\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1753697123297,"editorVersion":"8.0.11","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"/*\nThe code below is a refactoring of:\n- the ElecFreaks 'pxt-nezha' library:\n  https://github.com/elecfreaks/pxt-nezha/blob/master/main.ts\nMIT-license.\n*/\n\nenum Connector {\n    //% block=\"J1\" \n    J1 = DigitalPin.P8,\n    //% block=\"J2\"\n    J2 = DigitalPin.P12,\n    //% block=\"J3\"\n    J3 = DigitalPin.P14,\n    //% block=\"J4\"\n    J4 = DigitalPin.P16\n}\n\nenum Servo {\n    //% block=\"S1\" \n    S1,\n    //% block=\"S2\"\n    S2,\n    //% block=\"S3\" \n    S3,\n    //% block=\"S4\"\n    S4\n}\n\nenum ServoType {\n    //% block=\"180\"\n    ST180 = 180,\n    //% block=\"360\"\n    ST360 = 360,\n    //% block=\"continuous\"\n    //% block.loc.nl=\"continu\"\n    STC = 0\n}\n\nenum Motor {\n    //% block=\"M1\"\n    M1,\n    //% block=\"M2\"\n    M2,\n    //% block=\"M3\"\n    M3,\n    //% block=\"M4\"\n    M4\n}\n\nnamespace Nezha {\n\n    let MFL = 0\n    let MFR = 1\n    let MBL = 2\n    let MBR = 3\n    let Motors = [Motor.M1, Motor.M2, Motor.M3, Motor.M4]\n    let Revert = [false, false, false, false]\n    let Servos = [180, 180, 180, 180] // all ServoType.ST180\n\n    function setFrontLeftMotor(motor: Motor, revert: boolean) {\n        Motors[0] = motor\n        Revert[0] = revert\n    }\n\n    function setFrontRightMotor(motor: Motor, revert: boolean) {\n        Motors[1] = motor\n        Revert[1] = revert\n    }\n\n    function setBackLeftMotor(motor: Motor, revert: boolean) {\n        Motors[2] = motor\n        Revert[2] = revert\n    }\n\n    function setBackRightMotor(motor: Motor, revert: boolean) {\n        Motors[3] = motor\n        Revert[3] = revert\n    }\n\n    function setServoType(servo: Servo, st:ServoType) {\n        Servos[servo] = st\n    }\n\n    export function motorSpeed(motor: Motor, speed: number): void {\n\n        let iic_buffer = pins.createBuffer(4);\n\n        if (speed > 150) speed = 150\n        else\n            if (speed < -150) speed = -150\n\n        iic_buffer[0] = motor + 1\n        if (speed >= 0) {\n            iic_buffer[1] = 0x01; // forward\n            iic_buffer[2] = speed;\n        }\n        else {\n            iic_buffer[1] = 0x02; // reverse\n            iic_buffer[2] = -speed;\n        }\n        iic_buffer[3] = 0;\n\n        pins.i2cWriteBuffer(0x10, iic_buffer);\n    }\n\n    export function setFourWheelSpeed(frontleft: number, frontright: number, backleft: number, backright: number) {\n        // supply positive values to obtain 'forward' spinning\n        Nezha.motorSpeed(Motors[MFL], Revert[MFL] ? -frontleft : frontleft)\n        Nezha.motorSpeed(Motors[MFR], Revert[MFR] ? -frontright : frontright)\n        Nezha.motorSpeed(Motors[MBL], Revert[MBL] ? -backleft : backleft)\n        Nezha.motorSpeed(Motors[MBR], Revert[MBR] ? -backright : backright)\n    }\n\n    export function setTwoWheelSpeed(left: number, right: number) {\n        // supply positive values to obtain 'forward' spinning\n        Nezha.motorSpeed(Motors[MFL], Revert[MFL] ? -left : left)\n        Nezha.motorSpeed(Motors[MFR], Revert[MFR] ? -right : right)\n    }\n\n    export function servoAngle(servo: Servo, angle: number): void {\n        angle = Math.map(angle, 0, Servos[servo], 0, 180)\n        let iic_buffer = pins.createBuffer(4);\n        iic_buffer[0] = 0x10 + servo\n        iic_buffer[1] = angle;\n        iic_buffer[2] = 0;\n        iic_buffer[3] = 0;\n        pins.i2cWriteBuffer(0x10, iic_buffer);\n    }\n}\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-nezhabrick\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1753702251107,"editorVersion":"8.0.11","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"/*\nThe code below is a refactoring of:\n- the ElecFreaks 'pxt-nezha' library:\n  https://github.com/elecfreaks/pxt-nezha/blob/master/main.ts\nMIT-license.\n*/\n\nenum Motor {\n    //% block=\"M1\"\n    M1,\n    //% block=\"M2\"\n    M2,\n    //% block=\"M3\"\n    M3,\n    //% block=\"M4\"\n    M4\n}\n\nenum Servo {\n    //% block=\"S1\" \n    S1,\n    //% block=\"S2\"\n    S2,\n    //% block=\"S3\" \n    S3,\n    //% block=\"S4\"\n    S4\n}\n\nenum ServoType {\n    //% block=\"180\"\n    ST180 = 180,\n    //% block=\"180\"\n    ST27 = 270,\n    //% block=\"360\"\n    ST360 = 360\n}\n\nenum RJPin {\n    //% block=\"RJ1\"\n    RJ1,\n    //% block=\"RJ2\"\n    RJ2,\n    //% block=\"RJ3\"\n    RJ3,\n    //% block=\"RJ4\"\n    RJ4\n}\n\nnamespace Nezha {\n\n    // MOTOR MODULE\n\n    let MFL = 0\n    let MFR = 1\n    let MBL = 2\n    let MBR = 3\n    let Motors = [Motor.M1, Motor.M2, Motor.M3, Motor.M4]\n    let Revert = [false, false, false, false]\n\n    function setFrontLeftMotor(motor: Motor, revert: boolean) {\n        Motors[0] = motor\n        Revert[0] = revert\n    }\n\n    function setFrontRightMotor(motor: Motor, revert: boolean) {\n        Motors[1] = motor\n        Revert[1] = revert\n    }\n\n    function setBackLeftMotor(motor: Motor, revert: boolean) {\n        Motors[2] = motor\n        Revert[2] = revert\n    }\n\n    function setBackRightMotor(motor: Motor, revert: boolean) {\n        Motors[3] = motor\n        Revert[3] = revert\n    }\n\n    export function motorSpeed(motor: Motor, speed: number): void {\n\n        let iic_buffer = pins.createBuffer(4);\n\n        if (speed > 150) speed = 150\n        else\n            if (speed < -150) speed = -150\n\n        iic_buffer[0] = motor + 1\n        if (speed >= 0) {\n            iic_buffer[1] = 0x01; // forward\n            iic_buffer[2] = speed;\n        }\n        else {\n            iic_buffer[1] = 0x02; // reverse\n            iic_buffer[2] = -speed;\n        }\n        iic_buffer[3] = 0;\n\n        pins.i2cWriteBuffer(0x10, iic_buffer);\n    }\n\n    export function setFourWheelSpeed(frontleft: number, frontright: number, backleft: number, backright: number) {\n        // supply positive values to obtain 'forward' spinning\n        Nezha.motorSpeed(Motors[MFL], Revert[MFL] ? -frontleft : frontleft)\n        Nezha.motorSpeed(Motors[MFR], Revert[MFR] ? -frontright : frontright)\n        Nezha.motorSpeed(Motors[MBL], Revert[MBL] ? -backleft : backleft)\n        Nezha.motorSpeed(Motors[MBR], Revert[MBR] ? -backright : backright)\n    }\n\n    export function setTwoWheelSpeed(left: number, right: number) {\n        // supply positive values to obtain 'forward' spinning\n        Nezha.motorSpeed(Motors[MFL], Revert[MFL] ? -left : left)\n        Nezha.motorSpeed(Motors[MFR], Revert[MFR] ? -right : right)\n    }\n\n    // SERVO MODULE\n\n    let Servos = [180, 180, 180, 180] // all ServoType.ST180\n\n    function setServoType(servo: Servo, st: ServoType) {\n        Servos[servo] = st\n    }\n\n    export function servoAngle(servo: Servo, angle: number): void {\n        angle = Math.map(angle, 0, Servos[servo], 0, 180)\n        let iic_buffer = pins.createBuffer(4);\n        iic_buffer[0] = 0x10 + servo\n        iic_buffer[1] = angle;\n        iic_buffer[2] = 0;\n        iic_buffer[3] = 0;\n        pins.i2cWriteBuffer(0x10, iic_buffer);\n    }\n\n    // RJPIN MODULE\n\n    let ANAPIN = [DigitalPin.P1, DigitalPin.P2, DigitalPin.P13,DigitalPin.P15]\n    let DIGPIN = [DigitalPin.P8, DigitalPin.P12, DigitalPin.P14, DigitalPin.P16]\n\n    export function readAnalog(pin: RJPin): number {\n        return pins.analogReadPin(ANAPIN[pin])\n    }\n\n    export function writeAnalog(pin: RJPin, value:number) {\n        return pins.analogWritePin(ANAPIN[pin], value)\n    }\n\n    export function readDigital(pin: RJPin): boolean {\n        return (pins.digitalReadPin(DIGPIN[pin]) ? true : false)\n    }\n}\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-nezhabrick\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1753702554737}